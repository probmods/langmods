return(c(sws.true, ows.true))
}
sim(2, 2)
sim = function(players.per.team, matches.played) {
while (num.accepted < n.sims) {
reading = sample(c('s', 'o'), 1)
num.players = 12
#players.per.team = sample(1:6, 1)
# matches.played = sample(1:6, 1)
# from 2 teams to as many teams as possible given team size constraints
players.in.matches = sapply(1:matches.played, FUN=function(i){return(sample(1:num.players, 2*players.per.team, replace=F))})
#sws.true = length(unique(as.vector(players.in.matches))) == num.players
sws.true = length(unique(as.vector(players.in.matches))) > (num.players/2)
some = function(v) return(mean(v) > 0) # check at least one true in vector of booleans
#ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) == num.players)}, MARGIN=2))
ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) > num.players/2)}, MARGIN=2))
counts = c(s=0, o=0)
if (reading == 's' && sws.true) {
num.accepted = num.accepted + 1
counts[1] = counts[1] + 1
}
if (reading == 'o' && ows.true) {
num.accepted = num.accepted + 1
counts[2] = counts[2] + 1
}
}
return(counts)
}
sim = function(players.per.team, matches.played, n.sims) {
while (num.accepted < n.sims) {
reading = sample(c('s', 'o'), 1)
num.players = 12
#players.per.team = sample(1:6, 1)
# matches.played = sample(1:6, 1)
# from 2 teams to as many teams as possible given team size constraints
players.in.matches = sapply(1:matches.played, FUN=function(i){return(sample(1:num.players, 2*players.per.team, replace=F))})
#sws.true = length(unique(as.vector(players.in.matches))) == num.players
sws.true = length(unique(as.vector(players.in.matches))) > (num.players/2)
some = function(v) return(mean(v) > 0) # check at least one true in vector of booleans
#ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) == num.players)}, MARGIN=2))
ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) > num.players/2)}, MARGIN=2))
counts = c(s=0, o=0)
if (reading == 's' && sws.true) {
num.accepted = num.accepted + 1
counts[1] = counts[1] + 1
}
if (reading == 'o' && ows.true) {
num.accepted = num.accepted + 1
counts[2] = counts[2] + 1
}
}
return(counts)
}
sim(2, 2, 100)
sim = function(players.per.team, matches.played, n.sims) {
num.accepted = 0
while (num.accepted < n.sims) {
reading = sample(c('s', 'o'), 1)
num.players = 12
#players.per.team = sample(1:6, 1)
# matches.played = sample(1:6, 1)
# from 2 teams to as many teams as possible given team size constraints
players.in.matches = sapply(1:matches.played, FUN=function(i){return(sample(1:num.players, 2*players.per.team, replace=F))})
#sws.true = length(unique(as.vector(players.in.matches))) == num.players
sws.true = length(unique(as.vector(players.in.matches))) > (num.players/2)
some = function(v) return(mean(v) > 0) # check at least one true in vector of booleans
#ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) == num.players)}, MARGIN=2))
ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) > num.players/2)}, MARGIN=2))
counts = c(s=0, o=0)
if (reading == 's' && sws.true) {
num.accepted = num.accepted + 1
counts[1] = counts[1] + 1
}
if (reading == 'o' && ows.true) {
num.accepted = num.accepted + 1
counts[2] = counts[2] + 1
}
}
return(counts)
}
sim(2, 2, 100)
counts = c(s=0, o=0)
counts
num.accepted = 0
n.sims=100
reading = sample(c('s', 'o'), 1)
num.players = 12
#players.per.team = sample(1:6, 1)
# matches.played = sample(1:6, 1)
# from 2 teams to as many teams as possible given team size constraints
players.in.matches = sapply(1:matches.played, FUN=function(i){return(sample(1:num.players, 2*players.per.team, replace=F))})
#sws.true = length(unique(as.vector(players.in.matches))) == num.players
sws.true = length(unique(as.vector(players.in.matches))) > (num.players/2)
some = function(v) return(mean(v) > 0) # check at least one true in vector of booleans
#ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) == num.players)}, MARGIN=2))
ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) > num.players/2)}, MARGIN=2))
sws.true
ows.true
some = function(v) return(mean(v) > 0) # check at least one true in vector of booleans
sim = function(players.per.team, matches.played, n.sims) {
num.accepted = 0
counts = c(s=0, o=0)
while (num.accepted < n.sims) {
reading = sample(c('s', 'o'), 1)
num.players = 12
#players.per.team = sample(1:6, 1)
# matches.played = sample(1:6, 1)
# from 2 teams to as many teams as possible given team size constraints
players.in.matches = sapply(1:matches.played, FUN=function(i){return(sample(1:num.players, 2*players.per.team, replace=F))})
#sws.true = length(unique(as.vector(players.in.matches))) == num.players
sws.true = length(unique(as.vector(players.in.matches))) > (num.players/2)
#ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) == num.players)}, MARGIN=2))
ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) > num.players/2)}, MARGIN=2))
if (reading == 's' && sws.true) {
num.accepted = num.accepted + 1
counts[1] = counts[1] + 1
}
if (reading == 'o' && ows.true) {
num.accepted = num.accepted + 1
counts[2] = counts[2] + 1
}
}
return(counts)
}
sim(2, 2, 100)
sim = function(players.per.team, matches.played, n.sims) {
num.accepted = 0
counts = c(s=0, o=0)
while (num.accepted < n.sims) {
reading = sample(c('s', 'o'), 1)
num.players = 12
#players.per.team = sample(1:6, 1)
# matches.played = sample(1:6, 1)
# from 2 teams to as many teams as possible given team size constraints
players.in.matches = sapply(1:matches.played, FUN=function(i){return(sample(1:num.players, 2*players.per.team, replace=F))})
#sws.true = length(unique(as.vector(players.in.matches))) == num.players
sws.true = length(unique(as.vector(players.in.matches))) > (num.players/2)
#ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) == num.players)}, MARGIN=2))
ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) > num.players/2)}, MARGIN=2))
if (reading == 's' && sws.true) {
num.accepted = num.accepted + 1
counts[1] = counts[1] + 1
}
if (reading == 'o' && ows.true) {
num.accepted = num.accepted + 1
counts[2] = counts[2] + 1
}
}
return(counts)
}
sim(2, 3, 100)
sim = function(players.per.team, matches.played, n.sims) {
num.accepted = 0
counts = c(s=0, o=0)
while (num.accepted < n.sims) {
reading = sample(c('s', 'o'), 1)
num.players = 12
#players.per.team = sample(1:6, 1)
# matches.played = sample(1:6, 1)
# from 2 teams to as many teams as possible given team size constraints
players.in.matches = sapply(1:matches.played, FUN=function(i){return(sample(1:num.players, 2*players.per.team, replace=F))})
#sws.true = length(unique(as.vector(players.in.matches))) == num.players
sws.true = length(unique(as.vector(players.in.matches))) > (num.players/2)
#ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) == num.players)}, MARGIN=2))
ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) > num.players/2)}, MARGIN=2))
if (reading == 's' && sws.true) {
num.accepted = num.accepted + 1
counts[1] = counts[1] + 1
}
if (reading == 'o' && ows.true) {
num.accepted = num.accepted + 1
counts[2] = counts[2] + 1
}
}
return(counts)
}
sim(2, 4, 100)
sim = function(players.per.team, matches.played, n.sims) {
num.accepted = 0
counts = c(s=0, o=0)
while (num.accepted < n.sims) {
reading = sample(c('s', 'o'), 1)
num.players = 12
#players.per.team = sample(1:6, 1)
# matches.played = sample(1:6, 1)
# from 2 teams to as many teams as possible given team size constraints
players.in.matches = sapply(1:matches.played, FUN=function(i){return(sample(1:num.players, 2*players.per.team, replace=F))})
#sws.true = length(unique(as.vector(players.in.matches))) == num.players
sws.true = length(unique(as.vector(players.in.matches))) > (num.players/2)
#ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) == num.players)}, MARGIN=2))
ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) > num.players/2)}, MARGIN=2))
if (reading == 's' && sws.true) {
num.accepted = num.accepted + 1
counts[1] = counts[1] + 1
}
if (reading == 'o' && ows.true) {
num.accepted = num.accepted + 1
counts[2] = counts[2] + 1
}
}
return(counts)
}
sim(2, 6, 100)
sim = function(players.per.team, matches.played, n.sims) {
num.accepted = 0
counts = c(s=0, o=0)
while (num.accepted < n.sims) {
reading = sample(c('s', 'o'), 1)
num.players = 12
#players.per.team = sample(1:6, 1)
# matches.played = sample(1:6, 1)
# from 2 teams to as many teams as possible given team size constraints
players.in.matches = sapply(1:matches.played, FUN=function(i){return(sample(1:num.players, 2*players.per.team, replace=F))})
#sws.true = length(unique(as.vector(players.in.matches))) == num.players
sws.true = length(unique(as.vector(players.in.matches))) > (num.players/2)
#ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) == num.players)}, MARGIN=2))
ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) > num.players/2)}, MARGIN=2))
if (reading == 's' && sws.true) {
num.accepted = num.accepted + 1
counts[1] = counts[1] + 1
}
if (reading == 'o' && ows.true) {
num.accepted = num.accepted + 1
counts[2] = counts[2] + 1
}
}
return(counts)
}
sim(2, 7, 100)
sim = function(players.per.team, matches.played, n.sims) {
num.accepted = 0
counts = c(s=0, o=0)
while (num.accepted < n.sims) {
reading = sample(c('s', 'o'), 1)
num.players = 12
#players.per.team = sample(1:6, 1)
# matches.played = sample(1:6, 1)
# from 2 teams to as many teams as possible given team size constraints
players.in.matches = sapply(1:matches.played, FUN=function(i){return(sample(1:num.players, 2*players.per.team, replace=F))})
#sws.true = length(unique(as.vector(players.in.matches))) == num.players
sws.true = length(unique(as.vector(players.in.matches))) > (num.players/2)
#ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) == num.players)}, MARGIN=2))
ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) > num.players/2)}, MARGIN=2))
if (reading == 's' && sws.true) {
num.accepted = num.accepted + 1
counts[1] = counts[1] + 1
}
if (reading == 'o' && ows.true) {
num.accepted = num.accepted + 1
counts[2] = counts[2] + 1
}
}
return(counts)
}
sim(2, 20, 100)
matches.played=20
players.per.team=2
sim = function(players.per.team, matches.played, n.sims) {
num.accepted = 0
counts = c(s=0, o=0)
while (num.accepted < n.sims) {
reading = sample(c('s', 'o'), 1)
num.players = 12
#players.per.team = sample(1:6, 1)
# matches.played = sample(1:6, 1)
# from 2 teams to as many teams as possible given team size constraints
players.in.matches = sapply(1:matches.played, FUN=function(i){return(sample(1:num.players, 2*players.per.team, replace=F))})
#sws.true = length(unique(as.vector(players.in.matches))) == num.players
sws.true = length(unique(as.vector(players.in.matches))) > (num.players/2)
#ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) == num.players)}, MARGIN=2))
ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) > num.players/2)}, MARGIN=2))
if (reading == 's' && sws.true) {
num.accepted = num.accepted + 1
counts[1] = counts[1] + 1
}
if (reading == 'o' && ows.true) {
num.accepted = num.accepted + 1
counts[2] = counts[2] + 1
}
}
return(counts)
}
sim(3, 5, 100)
sim(4, 5, 100)
sim(4, 4, 100)
sim(4, 4, 100)
sim(4, 4, 1000)
sim(4, 4, 1000)
sim(4, 4, 1000)
sim(4, 4, 1000)
sim(4, 4, 1000)
sim(4, 4, 1000)
sim(4, 3, 1000)
sim(4, 3, 1000)
sim(4, 3, 1000)
sim(4, 2, 1000)
sim(4, 1, 1000)
sim(4, 1, 1000)
sim(4, 1, 1000)
sim(4, 1, 1000)
sim(4, 1, 1000)
sim(4, 1, 1000)
sim(3, 1, 1000)
sim = function(players.per.team, matches.played, n.sims) {
num.accepted = 0
counts = c(s=0, o=0)
while (num.accepted < n.sims) {
reading = sample(c('s', 'o'), 1)
num.players = 12
players.per.team = sample(1:6, 1)
matches.played = sample(1:6, 1)
# from 2 teams to as many teams as possible given team size constraints
players.in.matches = sapply(1:matches.played, FUN=function(i){return(sample(1:num.players, 2*players.per.team, replace=F))})
sws.true = length(unique(as.vector(players.in.matches))) == num.players
#  sws.true = length(unique(as.vector(players.in.matches))) > (num.players/2)
ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) == num.players)}, MARGIN=2))
#  ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) > num.players/2)}, MARGIN=2))
if (reading == 's' && sws.true) {
num.accepted = num.accepted + 1
counts[1] = counts[1] + 1
}
if (reading == 'o' && ows.true) {
num.accepted = num.accepted + 1
counts[2] = counts[2] + 1
}
}
return(counts)
}
sim(1000)
sim = function(n.sims) {
num.accepted = 0
counts = c(s=0, o=0)
while (num.accepted < n.sims) {
reading = sample(c('s', 'o'), 1)
num.players = 12
players.per.team = sample(1:6, 1)
matches.played = sample(1:6, 1)
# from 2 teams to as many teams as possible given team size constraints
players.in.matches = sapply(1:matches.played, FUN=function(i){return(sample(1:num.players, 2*players.per.team, replace=F))})
sws.true = length(unique(as.vector(players.in.matches))) == num.players
#  sws.true = length(unique(as.vector(players.in.matches))) > (num.players/2)
ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) == num.players)}, MARGIN=2))
#  ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) > num.players/2)}, MARGIN=2))
if (reading == 's' && sws.true) {
num.accepted = num.accepted + 1
counts[1] = counts[1] + 1
}
if (reading == 'o' && ows.true) {
num.accepted = num.accepted + 1
counts[2] = counts[2] + 1
}
}
return(counts)
}
sim(1000)
no.condition = sim.no.condition(1000)
sim.no.condition = function(n.sims) {
num.accepted = 0
counts = c(s=0, o=0)
while (num.accepted < n.sims) {
reading = sample(c('s', 'o'), 1)
num.players = 12
players.per.team = sample(1:6, 1)
matches.played = sample(1:6, 1)
# from 2 teams to as many teams as possible given team size constraints
players.in.matches = sapply(1:matches.played, FUN=function(i){return(sample(1:num.players, 2*players.per.team, replace=F))})
sws.true = length(unique(as.vector(players.in.matches))) == num.players
#  sws.true = length(unique(as.vector(players.in.matches))) > (num.players/2)
ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) == num.players)}, MARGIN=2))
#  ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) > num.players/2)}, MARGIN=2))
if (reading == 's' && sws.true) {
num.accepted = num.accepted + 1
counts[1] = counts[1] + 1
}
if (reading == 'o' && ows.true) {
num.accepted = num.accepted + 1
counts[2] = counts[2] + 1
}
}
return(counts)
}
no.condition = sim.no.condition(1000)
no.condition
sim.fixing.n.matches = function(matches.played, n.sims) {
num.accepted = 0
counts = c(s=0, o=0)
while (num.accepted < n.sims) {
reading = sample(c('s', 'o'), 1)
num.players = 12
players.per.team = sample(1:6, 1)
# from 2 teams to as many teams as possible given team size constraints
players.in.matches = sapply(1:matches.played, FUN=function(i){return(sample(1:num.players, 2*players.per.team, replace=F))})
sws.true = length(unique(as.vector(players.in.matches))) == num.players
#  sws.true = length(unique(as.vector(players.in.matches))) > (num.players/2)
ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) == num.players)}, MARGIN=2))
#  ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) > num.players/2)}, MARGIN=2))
if (reading == 's' && sws.true) {
num.accepted = num.accepted + 1
counts[1] = counts[1] + 1
}
if (reading == 'o' && ows.true) {
num.accepted = num.accepted + 1
counts[2] = counts[2] + 1
}
}
return(counts)
}
varying.matches = sapply(1:10, FUN=function(i){return(sim.fixing.n.matches(i, 1000))})
varying.matches
varying.matches=t(varying.matches)
colnames(varying.matches)
varying.matches$s
varying.matches[,1]
as.matrix(varying.matches)
as.matrix(varying.matches)$s
as.data.frame(varying.matches)$s
varying.matches = as.data.frame(varying.matches)
varying.matches
c <- ggplot(mtcars, aes(factor(cyl)))
library(ggplot2)
ggplot(varying.matches, aes())
c <- ggplot(mtcars, aes(factor(cyl)))
c + geom_bar()
mtcars
varying.matches
varying.matches=t(varying.matches)
varying.matches
varying.matches
colnames(varying.matches) = 1:10
varying.matches
varying.matches = as.data.frame(t(sapply(1:10, FUN=function(i){return(sim.fixing.n.matches(i, 1000))})))
rownames(varying.matches) = 1:length(varying.matches[1,])
varying.matches
rownames(varying.matches) = 1:length(varying.matches[,1])
varying.matches
qplot(s, o, data=varying.matches)
sim.fixing.n.matches = function(matches.played, n.sims) {
num.accepted = 0
counts = c(s=0, o=0)
while (num.accepted < n.sims) {
reading = sample(c('s', 'o'), 1)
num.players = 12
players.per.team = sample(1:6, 1)
# from 2 teams to as many teams as possible given team size constraints
players.in.matches = sapply(1:matches.played, FUN=function(i){return(sample(1:num.players, 2*players.per.team, replace=F))})
sws.true = length(unique(as.vector(players.in.matches))) == num.players
#  sws.true = length(unique(as.vector(players.in.matches))) > (num.players/2)
ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) == num.players)}, MARGIN=2))
#  ows.true = some(apply(players.in.matches, FUN=function(v){return(length(v) > num.players/2)}, MARGIN=2))
if (reading == 's' && sws.true) {
num.accepted = num.accepted + 1
counts[1] = counts[1] + 1
}
if (reading == 'o' && ows.true) {
num.accepted = num.accepted + 1
counts[2] = counts[2] + 1
}
}
return(counts/n.sims)
}
varying.matches = as.data.frame(t(sapply(1:10, FUN=function(i){return(sim.fixing.n.matches(i, 1000))})))
rownames(varying.matches) = 1:length(varying.matches[,1])
library(ggplot2)
qplot(s, o, data=varying.matches)
qplot(s, o, data=varying.matches, ylim(0,1))
qplot(s, data=varying.matches, ylim(0,1))
qplot(1:10, s, data=varying.matches, ylim(0,1))
ggplot(aes(x=1:10, y=s)) +
geom_line() +
ylim(0,1)
ggplot(varying.matches, aes(x=1:10, y=s)) +
geom_line() +
ylim(0,1)
library(ggplot2)
ggplot(varying.matches, aes(x=1:10, y=c(s, o)) +
geom_line() +
ylim(0,1)
library(ggplot2)
ggplot(varying.matches, aes(x=1:10, y=c(s, o))) +
geom_line() +
ylim(0,1)
ggplot(varying.matches, aes(x=1:10, y=c(s, o))) +
geom_line() +
ylim(0,1)
plot(1:10, varying.matches$s, color='red', type='b')
plot(1:10, varying.matches$s, color='red', type='b', pch=3, ylim=c(0,1), ylab="Probability")
points(1:10, varying.matches$o, color='blue', type='b', pch=3, ylim=c(0,1))
plot(1:10, varying.matches$s, color='red', type='b', pch=3, ylim=c(0,1), ylab="Probability")
points(1:10, varying.matches$o, color='blue', type='b', pch=10, ylim=c(0,1))
plot(1:10, varying.matches$s, col='red', type='b', pch=2, ylim=c(0,1), ylab="Probability")
points(1:10, varying.matches$o, col='blue', type='b', pch=2, ylim=c(0,1))
plot(1:10, varying.matches$s, col='red', type='b', pch=1, ylim=c(0,1), xlab="Number of matches", ylab="Probability of reading")
plot(1:10, varying.matches$s, col='red', type='b', pch=4, ylim=c(0,1), xlab="Number of matches", ylab="Probability of reading")
plot(1:10, varying.matches$s, col='red', type='b', pch=5, ylim=c(0,1), xlab="Number of matches", ylab="Probability of reading")
plot(1:10, varying.matches$s, col='red', type='b', pch=6, ylim=c(0,1), xlab="Number of matches", ylab="Probability of reading")
plot(1:10, varying.matches$s, col='red', type='b', pch=7, ylim=c(0,1), xlab="Number of matches", ylab="Probability of reading")
plot(1:10, varying.matches$s, col='red', type='b', pch=8, ylim=c(0,1), xlab="Number of matches", ylab="Probability of reading")
plot(1:10, varying.matches$s, col='red', type='b', pch=9, ylim=c(0,1), xlab="Number of matches", ylab="Probability of reading")
plot(1:10, varying.matches$s, col='red', type='b', pch=10, ylim=c(0,1), xlab="Number of matches", ylab="Probability of reading")
plot(1:10, varying.matches$s, col='red', type='b', pch=11, ylim=c(0,1), xlab="Number of matches", ylab="Probability of reading")
plot(1:10, varying.matches$s, col='red', type='b', pch=12, ylim=c(0,1), xlab="Number of matches", ylab="Probability of reading")
plot(1:10, varying.matches$s, col='red', type='b', pch=13, ylim=c(0,1), xlab="Number of matches", ylab="Probability of reading")
plot(1:10, varying.matches$s, col='red', type='b', pch=14, ylim=c(0,1), xlab="Number of matches", ylab="Probability of reading")
plot(1:10, varying.matches$s, col='red', type='b', lwd=3, ylim=c(0,1), xlab="Number of matches", ylab="Probability of reading")
plot(1:10, varying.matches$s, col='red', type='b', lwd=3, lty=1, ylim=c(0,1), xlab="Number of matches", ylab="Probability of reading")
points(1:10, varying.matches$o, col='blue', type='b', lwd=3, lty=2, pch=2, ylim=c(0,1))
legend('topleft', text.col=c('red', 'blue'), text=c("Subject wide scope", "Object wide scope"), lty=c(1,2))
legend('topleft', c("Subject wide scope", "Object wide scope"), text.col=c('red', 'blue'), lty=c(1,2))
legend('topleft', c("Subject wide scope", "Object wide scope"), text.col=c('red', 'blue'), lty=c(1,2), col=c('red', 'blue'))
plot(1:10, varying.matches$s, col='red', type='b', lwd=3, lty=1, ylim=c(0,1), xlab="Number of matches", ylab="Probability of reading")
points(1:10, varying.matches$o, col='blue', type='b', lwd=3, lty=2, pch=2, ylim=c(0,1))
legend('topleft', c("Subject wide scope", "Object wide scope"), text.col=c('red', 'blue'), lty=c(1,2), col=c('red', 'blue'))
