; helper functions

(define approx-strength
	(lambda (a b)
		(define epsilon 0.4)
		(< (abs (- a b)) epsilon)))

(define draw-n
  (lambda
    (n lst)
    (define next-draw (uniform-draw lst))
    (define rest-of-lst
      (fold (lambda
              (list-item cumulative-value)
              (if
               (equal? list-item next-draw)
               cumulative-value
               (append (list list-item) cumulative-value)))
            '()
            lst))
    (if (= n 1)
        (list next-draw)
        (append (list next-draw) (draw-n (- n 1) rest-of-lst)))))

(define element?
  (lambda (element lst)
    (fold
     (lambda (list-item cumulative-value)
      (if (equal? element list-item) #t cumulative-value))
     #f
     lst)))

(define filter
  (lambda (f lst)
    (fold
     (lambda (list-item cumulative-value)
       (if (f list-item)
           (append (list list-item) cumulative-value)
           cumulative-value))
     '()
     lst)))

(define range
  (lambda (a b)
    (if (> a b) '()
        (if (= a b)
            '()
            (append (list a) (range (+ a 1) b))))))

(define intersect
  (lambda (P Q)
    (lambda (x)
      (and (P x) (Q x)))))


; TYPE SHIFTERS
(define R (lambda (x) (lambda (y) (y x))))
(define S (lambda (x) (lambda (y) (lambda (z) (x (y z))))))
(define AR1 (lambda (f) (lambda (x) (lambda (y) (x (lambda (z) ((f z) y)))))))
(define AR2 (lambda (f) (lambda (x) (lambda (y) (x (lambda (z) ((f x) z)))))))
(define DIST (lambda (V) (lambda (s) (all (map V s)))))

(display (mh-query 10000 10
    ; utility
  (define size (lambda (S) (length (filter S individuals))))
  (define my-max
    (lambda (A N)
      (apply max (map A (filter N individuals)))))
  ;SEMANTICS

  ; individuals
  (define Bob 'Bob)
  (define Jim 'Jim)
  (define Mary 'Mary)
  (define Sue 'Sue)
  (define Bill 'Bill)
  (define Evan 'Evan)
  (define Sally 'Sally)
  (define Tim 'Tim)
  (define Joe 'Joe)
  (define Jane 'Jane)
  (define Terrence 'Terrence)
  (define Kate 'Kate)
  (define team1 'team1)
  (define team2 'team2)
  (define team3 'team3)
  (define match1 'match1)
  (define match2 'match2)
  (define match3 'match3)
  (define match4 'match4)
  ; one-place predicates
  (define player (lambda (x) (element? x players)))
  (define team (lambda (x) (element? x teams)))
  (define match (lambda (x) (element? x matches)))
  (define man (lambda (x) (equal? (gender x) 'male)))
  (define woman (lambda (x) (equal? (gender x) 'female)))
  ; two-place predicates
  (define won (lambda (match) (lambda (x) (equal? x (winner match)))))
  (define played-in (lambda (match) (lambda (x) (element? x (teams-in-match match)))))
  (define is-on (lambda (team) (lambda (x) (element? x (players-on-team team)))))
  (define captain (lambda (team) (lambda (x) (equal? x (captain team)))))
  ; quantifiers
  (define every (lambda (P) (lambda (Q) (= (size P) (size (intersect P Q))))))
  (define my-some (lambda (P) (lambda (Q) (< 0 (size (intersect P Q))))))
  (define most
    (lambda (P)
      (lambda (Q) (< (size P) (* 2 (size (intersect P Q)))))))
  ; gradeable adjectives
  (define strong (lambda (x) (strength x)))
  (define weak (lambda (x) (- (strength x))))
  (define est (lambda (A) (lambda (N) (lambda (x) (= (A x) (my-max A N))))))
  ; other
  (define conj-and (lambda (x) (lambda (y) (list x y))))
  ;tug of war theory
  (define players '(Bob Jim Mary Sue Bill Evan Sally Tim Joe Jane Terrence Kate))
  (define teams '(team1 team2 team3))
  (define matches '(match1 match2 match3 match4))
  (define individuals (append players teams matches))
  (define gender (mem (lambda (p) (if (flip) 'male 'female))))
  (define gender-mean-strength (mem (lambda (g) (gaussian 0 2))))
  (define strength (mem (lambda (p)
    (gaussian (gender-mean-strength (gender p)) 1))))
  (define team-size (uniform-draw '(1 2 3 4 5 6)))
  (define players-on-team (mem (lambda (team) (draw-n team-size players))))
  (define captain (mem (lambda (team) (uniform-draw (players-on-team team)))))
  (define teams-in-match (mem (lambda (match) (draw-n 2 teams))))
  (define pulling (mem (lambda
    (player match) (+ (strength player) (gaussian 0 0.5)))))
  (define team-pulling (mem (lambda (team match)
                              (sum (map (lambda (x) (pulling x match))
                                        (players-on-team team))))))
  (define (winner match)
    (let ([ teamA (first (teams-in-match match)) ]
          [ teamB (second (teams-in-match match)) ])
      (if (> (team-pulling teamA match) (team-pulling teamB match))
          teamA
          teamB)))

  (define bob-gender (if (flip) 'male 'female))
  (define bob-strength (gaussian (gender-mean-strength bob-gender) 1))
  (define team1 '(Jim))
  (define team2 '(Bob))
  (define match1 '(team1 team2))
  (define jim-gender (if (flip) 'male 'female))
  (define jim-strength (gaussian (gender-mean-strength jim-gender) 1))
  (define mary-gender (if (flip) 'male 'female))
  (define mary-strength (gaussian (gender-mean-strength mary-gender) 1))
  (define sue-gender (if (flip) 'male 'female))
  (define sue-strength (gaussian (gender-mean-strength sue-gender) 1))
  (define bill-gender (if (flip) 'male 'female))
  (define bill-strength (gaussian (gender-mean-strength bill-gender) 1))
  (define evan-gender (if (flip) 'male 'female))
  (define evan-strength (gaussian (gender-mean-strength evan-gender) 1))
  (define sally-gender (if (flip) 'male 'female))
  (define sally-strength (gaussian (gender-mean-strength sally-gender) 1))
  (define tim-gender (if (flip) 'male 'female))
  (define tim-strength (gaussian (gender-mean-strength tim-gender) 1))
  (define joe-gender (if (flip) 'male 'female))
  (define joe-strength (gaussian (gender-mean-strength joe-gender) 1))
  (define jane-gender (if (flip) 'male 'female))
  (define jane-strength (gaussian (gender-mean-strength jane-gender) 1))
  (define terrence-gender (if (flip) 'male 'female))
  (define terrence-strength (gaussian (gender-mean-strength terrence-gender) 1))
  (define kate-gender (if (flip) 'male 'female))
  (define kate-strength (gaussian (gender-mean-strength kate-gender) 1))

  bob-strength

  (and
    (equal? (winner 'match1) 'team1)
    (= jim-strength (min
      bob-strength
      jim-strength
      mary-strength
      sue-strength
      bill-strength
      evan-strength
      sally-strength
      tim-strength
      joe-strength
      jane-strength
      terrence-strength
      kate-strength)))
))

(display (mh-query 10000 10
    ; utility
  (define size (lambda (S) (length (filter S individuals))))
  (define my-max
    (lambda (A N)
      (apply max (map A (filter N individuals)))))
  ;SEMANTICS

  ; individuals
  (define Bob 'Bob)
  (define Jim 'Jim)
  (define Mary 'Mary)
  (define Sue 'Sue)
  (define Bill 'Bill)
  (define Evan 'Evan)
  (define Sally 'Sally)
  (define Tim 'Tim)
  (define Joe 'Joe)
  (define Jane 'Jane)
  (define Terrence 'Terrence)
  (define Kate 'Kate)
  (define team1 'team1)
  (define team2 'team2)
  (define team3 'team3)
  (define match1 'match1)
  (define match2 'match2)
  (define match3 'match3)
  (define match4 'match4)
  ; one-place predicates
  (define player (lambda (x) (element? x players)))
  (define team (lambda (x) (element? x teams)))
  (define match (lambda (x) (element? x matches)))
  (define man (lambda (x) (equal? (gender x) 'male)))
  (define woman (lambda (x) (equal? (gender x) 'female)))
  ; two-place predicates
  (define won (lambda (match) (lambda (x) (equal? x (winner match)))))
  (define played-in (lambda (match) (lambda (x) (element? x (teams-in-match match)))))
  (define is-on (lambda (team) (lambda (x) (element? x (players-on-team team)))))
  (define captain (lambda (team) (lambda (x) (equal? x (captain team)))))
  ; quantifiers
  (define every (lambda (P) (lambda (Q) (= (size P) (size (intersect P Q))))))
  (define my-some (lambda (P) (lambda (Q) (< 0 (size (intersect P Q))))))
  (define most
    (lambda (P)
      (lambda (Q) (< (size P) (* 2 (size (intersect P Q)))))))
  ; gradeable adjectives
  (define strong (lambda (x) (strength x)))
  (define weak (lambda (x) (- (strength x))))
  (define est (lambda (A) (lambda (N) (lambda (x) (= (A x) (my-max A N))))))
  ; other
  (define conj-and (lambda (x) (lambda (y) (list x y))))
  ;tug of war theory
  (define players '(Bob Jim Mary Sue Bill Evan Sally Tim Joe Jane Terrence Kate))
  (define teams '(team1 team2 team3))
  (define matches '(match1 match2 match3 match4))
  (define individuals (append players teams matches))
  (define gender (mem (lambda (p) (if (flip) 'male 'female))))
  (define gender-mean-strength (mem (lambda (g) (gaussian 0 2))))
  (define strength (mem (lambda (p)
    (gaussian (gender-mean-strength (gender p)) 1))))
  (define team-size (uniform-draw '(1 2 3 4 5 6)))
  (define players-on-team (mem (lambda (team) (draw-n team-size players))))
  (define captain (mem (lambda (team) (uniform-draw (players-on-team team)))))
  (define teams-in-match (mem (lambda (match) (draw-n 2 teams))))
  (define pulling (mem (lambda
    (player match) (+ (strength player) (gaussian 0 0.5)))))
  (define team-pulling (mem (lambda (team match)
                              (sum (map (lambda (x) (pulling x match))
                                        (players-on-team team))))))
  (define (winner match)
    (let ([ teamA (first (teams-in-match match)) ]
          [ teamB (second (teams-in-match match)) ])
      (if (> (team-pulling teamA match) (team-pulling teamB match))
          teamA
          teamB)))

  (define bob-gender (if (flip) 'male 'female))
  (define bob-strength (gaussian (gender-mean-strength bob-gender) 1))
  (define team1 '(Jim))
  (define team2 '(Bob))
  (define match1 '(team1 team2))
  (define jim-gender (if (flip) 'male 'female))
  (define jim-strength (gaussian (gender-mean-strength jim-gender) 1))
  (define mary-gender (if (flip) 'male 'female))
  (define mary-strength (gaussian (gender-mean-strength mary-gender) 1))
  (define sue-gender (if (flip) 'male 'female))
  (define sue-strength (gaussian (gender-mean-strength sue-gender) 1))
  (define bill-gender (if (flip) 'male 'female))
  (define bill-strength (gaussian (gender-mean-strength bill-gender) 1))
  (define evan-gender (if (flip) 'male 'female))
  (define evan-strength (gaussian (gender-mean-strength evan-gender) 1))
  (define sally-gender (if (flip) 'male 'female))
  (define sally-strength (gaussian (gender-mean-strength sally-gender) 1))
  (define tim-gender (if (flip) 'male 'female))
  (define tim-strength (gaussian (gender-mean-strength tim-gender) 1))
  (define joe-gender (if (flip) 'male 'female))
  (define joe-strength (gaussian (gender-mean-strength joe-gender) 1))
  (define jane-gender (if (flip) 'male 'female))
  (define jane-strength (gaussian (gender-mean-strength jane-gender) 1))
  (define terrence-gender (if (flip) 'male 'female))
  (define terrence-strength (gaussian (gender-mean-strength terrence-gender) 1))
  (define kate-gender (if (flip) 'male 'female))
  (define kate-strength (gaussian (gender-mean-strength kate-gender) 1))

  bob-strength

  (and
    (equal? (winner 'match1) 'team1)
    (= jim-strength (min
      bob-strength
      jim-strength
      mary-strength
      sue-strength
      bill-strength
      evan-strength
      sally-strength
      tim-strength
      joe-strength
      jane-strength
      terrence-strength
      kate-strength)))
))

(mh-query 10000 10
    ; utility
  (define size (lambda (S) (length (filter S individuals))))
  (define my-max
    (lambda (A N)
      (apply max (map A (filter N individuals)))))
  ;SEMANTICS

  ; individuals
  (define Bob 'Bob)
  (define Jim 'Jim)
  (define Mary 'Mary)
  (define Sue 'Sue)
  (define Bill 'Bill)
  (define Evan 'Evan)
  (define Sally 'Sally)
  (define Tim 'Tim)
  (define Joe 'Joe)
  (define Jane 'Jane)
  (define Terrence 'Terrence)
  (define Kate 'Kate)
  (define team1 'team1)
  (define team2 'team2)
  (define team3 'team3)
  (define match1 'match1)
  (define match2 'match2)
  (define match3 'match3)
  (define match4 'match4)
  ; one-place predicates
  (define player (lambda (x) (element? x players)))
  (define team (lambda (x) (element? x teams)))
  (define match (lambda (x) (element? x matches)))
  (define man (lambda (x) (equal? (gender x) 'male)))
  (define woman (lambda (x) (equal? (gender x) 'female)))
  ; two-place predicates
  (define won (lambda (match) (lambda (x) (equal? x (winner match)))))
  (define played-in (lambda (match) (lambda (x) (element? x (teams-in-match match)))))
  (define is-on (lambda (team) (lambda (x) (element? x (players-on-team team)))))
  (define captain (lambda (team) (lambda (x) (equal? x (captain team)))))
  ; quantifiers
  (define every (lambda (P) (lambda (Q) (= (size P) (size (intersect P Q))))))
  (define my-some (lambda (P) (lambda (Q) (< 0 (size (intersect P Q))))))
  (define most
    (lambda (P)
      (lambda (Q) (< (size P) (* 2 (size (intersect P Q)))))))
  ; gradeable adjectives
  (define strong (lambda (x) (strength x)))
  (define weak (lambda (x) (- (strength x))))
  (define est (lambda (A) (lambda (N) (lambda (x) (= (A x) (my-max A N))))))
  ; other
  (define conj-and (lambda (x) (lambda (y) (list x y))))
  ;tug of war theory
  (define players '(Bob Jim Mary Sue Bill Evan Sally Tim Joe Jane Terrence Kate))
  (define teams '(team1 team2 team3))
  (define matches '(match1 match2 match3 match4))
  (define individuals (append players teams matches))
  (define gender (mem (lambda (p) (if (flip) 'male 'female))))
  (define gender-mean-strength (mem (lambda (g) (gaussian 0 2))))
  (define strength (mem (lambda (p)
    (gaussian (gender-mean-strength (gender p)) 1))))
  (define team-size (uniform-draw '(1 2 3 4 5 6)))
  (define players-on-team (mem (lambda (team) (draw-n team-size players))))
  (define captain (mem (lambda (team) (uniform-draw (players-on-team team)))))
  (define teams-in-match (mem (lambda (match) (draw-n 2 teams))))
  (define pulling (mem (lambda
    (player match) (+ (strength player) (gaussian 0 0.5)))))
  (define team-pulling (mem (lambda (team match)
                              (sum (map (lambda (x) (pulling x match))
                                        (players-on-team team))))))
  (define (winner match)
    (let ([ teamA (first (teams-in-match match)) ]
          [ teamB (second (teams-in-match match)) ])
      (if (> (team-pulling teamA match) (team-pulling teamB match))
          teamA
          teamB)))

  (define bob-gender (if (flip) 'male 'female))
  (define bob-strength (gaussian (gender-mean-strength bob-gender) 1))
  (define team1 '(Bob))
  (define team2 '(Jim))
  (define match1 '(team1 team2))
  (define jim-gender (if (flip) 'male 'female))
  (define jim-strength (gaussian (gender-mean-strength jim-gender) 1))
  (define mary-gender (if (flip) 'male 'female))
  (define mary-strength (gaussian (gender-mean-strength mary-gender) 1))
  (define sue-gender (if (flip) 'male 'female))
  (define sue-strength (gaussian (gender-mean-strength sue-gender) 1))
  (define bill-gender (if (flip) 'male 'female))
  (define bill-strength (gaussian (gender-mean-strength bill-gender) 1))
  (define evan-gender (if (flip) 'male 'female))
  (define evan-strength (gaussian (gender-mean-strength evan-gender) 1))
  (define sally-gender (if (flip) 'male 'female))
  (define sally-strength (gaussian (gender-mean-strength sally-gender) 1))
  (define tim-gender (if (flip) 'male 'female))
  (define tim-strength (gaussian (gender-mean-strength tim-gender) 1))
  (define joe-gender (if (flip) 'male 'female))
  (define joe-strength (gaussian (gender-mean-strength joe-gender) 1))
  (define jane-gender (if (flip) 'male 'female))
  (define jane-strength (gaussian (gender-mean-strength jane-gender) 1))
  (define terrence-gender (if (flip) 'male 'female))
  (define terrence-strength (gaussian (gender-mean-strength terrence-gender) 1))
  (define kate-gender (if (flip) 'male 'female))
  (define kate-strength (gaussian (gender-mean-strength kate-gender) 1))

  bob-strength

  #t
  ;(and
    ;(equal? (winner 'match1) 'team1)
    ;(= jim-strength (min
    ;  bob-strength
    ;  jim-strength
    ;  mary-strength
    ;  sue-strength
    ;  bill-strength
    ;  evan-strength
    ;  sally-strength
    ;  tim-strength
    ;  joe-strength
    ;  jane-strength
    ;  terrence-strength
    ;  kate-strength))
  ;)
)